import { jsx as C } from "react/jsx-runtime";
import T from "react";
import { styled as L } from "@mui/material/styles";
import W from "@mui/material/TextField";
import q from "@mui/material/Box";
const z = L(W)`
  input {
    text-align: center;
  }
`, G = {
  TextFieldStyled: z
}, J = (n) => /* @__PURE__ */ C(G.TextFieldStyled, { ...n }), f = {
  left: "ArrowLeft",
  right: "ArrowRight",
  backspace: "Backspace",
  home: "Home",
  end: "End"
};
function Q(n, o) {
  return n <= 0 ? [] : Array.from({ length: n }, o);
}
function U(n, o, l) {
  return n.map((a, i) => o === i ? l : a);
}
function k(n) {
  return n.join("");
}
function w(n, o) {
  return [...n, o];
}
function X(n, o, l) {
  return n.reduce(
    (a, i, d) => {
      const { characters: h, restArrayMerged: p } = a;
      if (d < l)
        return {
          restArrayMerged: p,
          characters: w(h, i)
        };
      const [m, ...g] = p;
      return {
        restArrayMerged: g,
        characters: w(h, m || "")
      };
    },
    {
      restArrayMerged: o,
      characters: []
    }
  ).characters;
}
function Z(n) {
  return n.split("");
}
const v = T.forwardRef(
  (n, o) => {
    const {
      value: l,
      length: a,
      autoFocus: i,
      onChange: d,
      TextFieldsProps: h,
      onComplete: p,
      validateChar: m,
      className: g,
      ...B
    } = n, {
      onPaste: P,
      onFocus: R,
      onKeyDown: S,
      className: E,
      ...M
    } = h || {}, c = Q(
      a,
      (e, r) => ({
        character: l[r] || "",
        inputRef: T.createRef()
      })
    ), y = (e) => c.findIndex(({ inputRef: r }) => r.current === e), D = () => c.map(({ character: e }) => e), N = (e, r) => {
      const t = U(
        D(),
        e,
        r
      );
      return k(t);
    }, x = (e) => {
      c[e]?.inputRef.current?.focus();
    }, u = (e) => {
      e === -1 ? c[c.length - 1]?.inputRef.current?.select() : c[e]?.inputRef.current?.select();
    }, F = (e) => {
      e + 1 !== a && (c[e + 1].character ? u(e + 1) : x(e + 1));
    }, K = (e) => {
      e > 0 && u(e - 1);
    }, V = (e) => {
      const r = e.target.value[0] || "", t = y(e.target);
      if (typeof m == "function" && !m(r, t))
        return;
      const s = N(t, r);
      d?.(s), s.length === a && p?.(s), r !== "" ? s.length < a ? F(s.length - 1) : F(t) : s[t] ? u(t) : K(t);
    }, b = (e) => {
      e.preventDefault(), e.target.select(), R?.(e);
    }, j = (e) => {
      const r = e.target, t = y(r);
      r.value === e.key ? (e.preventDefault(), F(t)) : !r.value && f.backspace === e.key || f.left === e.key ? (e.preventDefault(), u(t - 1)) : f.right === e.key ? (e.preventDefault(), u(t + 1)) : f.home === e.key ? (e.preventDefault(), u(0)) : f.end === e.key && (e.preventDefault(), u(-1)), S?.(e);
    }, $ = (e) => {
      e.preventDefault();
      const r = e.target, t = e.clipboardData.getData("text/plain"), s = y(r), Y = D(), A = X(
        Y,
        Z(t),
        s
      ), O = A.findIndex((_, H) => H > s && _ === ""), I = k(A);
      if (d?.(I), I.length === a) {
        p?.(I), x(a - 1);
        return;
      }
      O !== -1 && x(O), P?.(e);
    };
    return /* @__PURE__ */ C(
      q,
      {
        display: "flex",
        gap: "20px",
        alignItems: "center",
        ref: o,
        className: `MuiOtpInput-Box ${g || ""}`,
        ...B,
        children: c.map(({ character: e, inputRef: r }, t) => /* @__PURE__ */ C(
          J,
          {
            autoFocus: i ? t === 0 : !1,
            autoComplete: "one-time-code",
            value: e,
            inputRef: r,
            className: `MuiOtpInput-TextField MuiOtpInput-TextField-${t + 1} ${E || ""}`,
            onPaste: $,
            onFocus: b,
            onChange: V,
            onKeyDown: j,
            ...M
          },
          t
        ))
      }
    );
  }
);
v.defaultProps = {
  value: "",
  length: 4,
  autoFocus: !1,
  validateChar: () => !0,
  onChange: () => {
  },
  onComplete: () => {
  },
  TextFieldsProps: {}
};
export {
  v as MuiOtpInput
};
